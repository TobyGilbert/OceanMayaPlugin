//----------------------------------------------------------------------------------------------------------------------
/// @class Ocean FFT class
/// @brief A class for generating an ocean surface using fast fourier transform
/// @author Toby Gilbert
/// @version 1.0
/// @date 03/04/15
//----------------------------------------------------------------------------------------------------------------------
#ifndef OCEAN_H
#define OCEAN_H

#define short2 MAYA_short2
#define short3 MAYA_short3
#define long2 MAYA_long2
#define long3 MAYA_long3
#define int2 MAYA_int2
#define int3 MAYA_int3
#define float2 MAYA_float2
#define float3 MAYA_float3
#define double2 MAYA_double2
#define double3 MAYA_double3
#define double4 MAYA_double4

#include <maya/MPoint.h>
#include <maya/MGlobal.h>
#include <maya/MVectorArray.h>
#include <maya/MGeometry.h>

#undef short2
#undef short3
#undef long2
#undef long3
#undef int2
#undef int3
#undef float2
#undef float3
#undef double2
#undef double3
#undef double4

#include <cuda_runtime.h>
#include <cufft.h>
//----------------------------------------------------------------------------------------------------------------------
class Ocean
{
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The contructor which initialises some parameters
  //----------------------------------------------------------------------------------------------------------------------
  Ocean();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The destructor which deletes both our memory alocated on the device and host
  //----------------------------------------------------------------------------------------------------------------------
  ~Ocean();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initilise the Ocean Grid
  //----------------------------------------------------------------------------------------------------------------------
  void initialise();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Phillips spectrum which represents our wave spectrum for wind-driven waves
  /// @param _k a position on our grid in the range -gridResolution/2 < _k < gridResolution/2
  //----------------------------------------------------------------------------------------------------------------------
  float phillips(float2 _k);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Gaussian RNG between 0 and 1
  //----------------------------------------------------------------------------------------------------------------------
  float gauss();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Create the frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  void createH0();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Update the frequency domain, heights of our simulation
  /// @param _time the current time/frame of our simulation
  //----------------------------------------------------------------------------------------------------------------------
  void update(double _time);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Return the heights of the vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* getHeights();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the max amplitude of the waves
  /// @param _amplitude the new max amplitude of our wave sim
  //----------------------------------------------------------------------------------------------------------------------
  inline void setAmplitude(float _amplitude){m_A = _amplitude;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the wind vector
  /// @param _windVector the direction of the wind and hence our waves
  //----------------------------------------------------------------------------------------------------------------------
  void setWindVector(float2 _windVector);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns displacement of our vertices in the x axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* getChopX();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns displacement of our vertices in the z axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* getChopZ();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set the resolution of the grid we are simulating on
  /// @param _res the new resolution of our simulation grid
  //----------------------------------------------------------------------------------------------------------------------
  void setResolution(int _res);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set the velocity of the wind
  /// @param _speed the new velocity of our wind
  //----------------------------------------------------------------------------------------------------------------------
  void setWindSpeed(float _speed);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set the frequency of the waves
  /// @param _frequency the new frequency of our waves
  //----------------------------------------------------------------------------------------------------------------------
  void setFrequency(float _frequency){m_frequency =_frequency;}
  //----------------------------------------------------------------------------------------------------------------------
private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Host side float array for storing frequency domain
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_Ht;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Device side float array for storing
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_Ht;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Host side float array for storing heights of vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_Heights;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Device side float array for storing  heights of vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_Heights;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Host side float array for storing frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_H0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Device side float array for storing frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_H0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Device side float array for storing displacement in the x axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_ChopX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Host side float array for storing displacement in the x axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_ChopX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Device side float array for storing displacement in the z axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_ChopZ;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Host side float array for storing displacement in the z axis
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_ChopZ;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our fft plan for use with the cufft library
  //----------------------------------------------------------------------------------------------------------------------
  cufftHandle m_fftPlan;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The resolution of our grid
  //----------------------------------------------------------------------------------------------------------------------
  int m_resolution;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The maximum amplitude our waves can have
  //----------------------------------------------------------------------------------------------------------------------
  float m_A;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Variable for the largest possible waves arising from a continuous wind of speed V when m_L = V^2/g
  //----------------------------------------------------------------------------------------------------------------------
  int m_L;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief 1/M_L
  //----------------------------------------------------------------------------------------------------------------------
  float m_l;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The normalised direction of the wind
  //----------------------------------------------------------------------------------------------------------------------
  float2 m_windDirection;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The size of our grid
  //----------------------------------------------------------------------------------------------------------------------
  float m_gridSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The speed of the wind
  //----------------------------------------------------------------------------------------------------------------------
  float m_windSpeed;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Frequency of the waves
  //----------------------------------------------------------------------------------------------------------------------
  float m_frequency;
  //----------------------------------------------------------------------------------------------------------------------
};



#endif
