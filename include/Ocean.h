//----------------------------------------------------------------------------------------------------------------------
/// @brief
/// simple Perlin noise class cobbled together from Computer Graphics OpenGL by F,S Hill
/// and Texturing and Modeling Ebert et-al
/// also thanks to Ian Stephenson for help and debuging tips
/// more work needs to be done to add interpolated noise functions and improve the
/// aliasing of the textures but it is ok for basic use
//----------------------------------------------------------------------------------------------------------------------
#ifndef OCEAN_H
#define OCEAN_H

#define short2 MAYA_short2
#define short3 MAYA_short3
#define long2 MAYA_long2
#define long3 MAYA_long3
#define int2 MAYA_int2
#define int3 MAYA_int3
#define float2 MAYA_float2
#define float3 MAYA_float3
#define double2 MAYA_double2
#define double3 MAYA_double3
#define double4 MAYA_double4

#include <maya/MPoint.h>
#include <maya/MGlobal.h>
#include <maya/MVectorArray.h>

#undef short2
#undef short3
#undef long2
#undef long3
#undef int2
#undef int3
#undef float2
#undef float3
#undef double2
#undef double3
#undef double4

#include <cuda_runtime.h>
#include <helper_math.h>
#include <cufft.h>

//----------------------------------------------------------------------------------------------------------------------
/// @class Ocean FFT class
/// @author Toby Gilbert
/// @version 1.0
/// @date 03/04/15
//----------------------------------------------------------------------------------------------------------------------

class Ocean
{
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a ctor dynamically allocates two tables
  //----------------------------------------------------------------------------------------------------------------------
  Ocean();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor will remove tables allocated by dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~Ocean();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initilise the Ocean Grid
  //----------------------------------------------------------------------------------------------------------------------
  void initialise();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Phillips spectrum
  //----------------------------------------------------------------------------------------------------------------------
  float phillips(float2 _k);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Gaussian RNG between 0 and 1
  //----------------------------------------------------------------------------------------------------------------------
  float gauss();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Create the frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  void createH0();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Update the frequency domain, heights of our sim
  //----------------------------------------------------------------------------------------------------------------------
  void update(double _time);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Return the heights of the vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* getHeights();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the amplitude of the waves
  //----------------------------------------------------------------------------------------------------------------------
  inline void setAmplitude(float _amplitude){m_A = _amplitude;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets the wind vector
  //----------------------------------------------------------------------------------------------------------------------
  inline void setWindVector(float2 _windVector){m_windSpeed = _windVector;}
  //----------------------------------------------------------------------------------------------------------------------
  float2* getChopX();
  float2* getChopY();
private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief host side float array for storing frequency domain
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_Ht;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief device side float array for storing
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_Ht;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief host side float array for storing heights of vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_Heights;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief device side float array for storing  heights of vertices
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_Heights;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief host side float array for storing frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  float2* h_H0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief device side float array for storing frequency domain at time zero
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_H0;
  //----------------------------------------------------------------------------------------------------------------------
  float2* d_ChopX;
  float2* h_ChopX;
  float2* d_ChopY;
  float2* h_ChopY;
  /// @brief our fft plan for use with the cufft library
  //----------------------------------------------------------------------------------------------------------------------
  cufftHandle m_fftPlan;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The resolution of our grid
  //----------------------------------------------------------------------------------------------------------------------
  int m_resolution;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The amplitude
  //----------------------------------------------------------------------------------------------------------------------
  float m_A;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief
  //----------------------------------------------------------------------------------------------------------------------
  int m_L;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief
  //----------------------------------------------------------------------------------------------------------------------
  float m_l;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The speed and direction of the wind
  //----------------------------------------------------------------------------------------------------------------------
  float2 m_windSpeed;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The size of our grid
  //----------------------------------------------------------------------------------------------------------------------
  float m_gridSize;
  //----------------------------------------------------------------------------------------------------------------------
};



#endif
