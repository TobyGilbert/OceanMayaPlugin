#ifndef OCEANNODE_H
#define OCEANNODE_H

#define short2 MAYA_short2
#define short3 MAYA_short3
#define long2 MAYA_long2
#define long3 MAYA_long3
#define int2 MAYA_int2
#define int3 MAYA_int3
#define float2 MAYA_float2
#define float3 MAYA_float3
#define double2 MAYA_double2
#define double3 MAYA_double3
#define double4 MAYA_double4

#include <maya/MTypeId.h>
#include <maya/MStatus.h>
#include <maya/M3dView.h>
#include <maya/MGlobal.h>
#include <maya/MPxLocatorNode.h>
#include <maya/MFnDependencyNode.h>
#include <maya/MNodeMessage.h>
#include <maya/MMessage.h>
#include <maya/MFnNumericAttribute.h>
#include <maya/MFnUnitAttribute.h>
#include <maya/MFnEnumAttribute.h>
#include <maya/MTime.h>
#include <maya/MFloatPointArray.h>
#include <maya/MFnMesh.h>
#include <maya/MFnMeshData.h>
#include <maya/MFnTypedAttribute.h>
#include <maya/MAnimControl.h>

#undef short2
#undef short3
#undef long2
#undef long3
#undef int2
#undef int3
#undef float2
#undef float3
#undef double2
#undef double3
#undef double4

#include "Ocean.h"
//----------------------------------------------------------------------------------------------------------------------
/// @brief this class implements a perlin noise node with one output, it has 3 different noise
/// access types noise, turbulance and complex descriptions below
//----------------------------------------------------------------------------------------------------------------------

class OceanNode : public MPxNode
{

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the creator node is called when the plugin is created
  //----------------------------------------------------------------------------------------------------------------------
  static void		*creator();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialize called when plug is created
  //----------------------------------------------------------------------------------------------------------------------
  static MStatus		initialize();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief compute is called every time the attributes of the class change
  /// @param [in] 	_plug 	plug representing the attribute that needs to be recomputed
  /// @param [in] 	_block 	data block containing storage for the node'_scale attributes
  //----------------------------------------------------------------------------------------------------------------------
  virtual MStatus		compute(
                             const MPlug &_plug ,
                              MDataBlock &_block
                            );


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the id of this plugin must be public so we can set outside of class
  //----------------------------------------------------------------------------------------------------------------------
  static MTypeId 		m_id;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the unique type name of our custom node. Mainly for mel purposes.
  /// must be public so maya can access
  //----------------------------------------------------------------------------------------------------------------------
  static const MString typeName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor this will dynamically allocate a Noise class
  //----------------------------------------------------------------------------------------------------------------------
  OceanNode();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor this will destroy the noise class created in the ctor
  //----------------------------------------------------------------------------------------------------------------------
  ~OceanNode();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Create a new ocean grid to work with
  //----------------------------------------------------------------------------------------------------------------------
  void createGrid(double _time, double _choppiness, MObject &_outputData, MStatus &_status);
  //----------------------------------------------------------------------------------------------------------------------
private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the amplitude of our node
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_amplitude;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the wind speed in the x direction
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_windSpeedX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the wind speed in the y direction
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_windSpeedY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the output to our node
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_output;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_time;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The chopiness scale factor
  //----------------------------------------------------------------------------------------------------------------------
  static MObject m_choppiness;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the ocean generator
  //----------------------------------------------------------------------------------------------------------------------
  Ocean *m_ocean;
  //----------------------------------------------------------------------------------------------------------------------
  /// A mesh to hold our ocean grid
  //----------------------------------------------------------------------------------------------------------------------
  MFnMesh m_grid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief attribute for keeping track of the amplitude variable
  //----------------------------------------------------------------------------------------------------------------------
  static double m_amp;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief attribute for keeping track of the wind spped x variable
  //----------------------------------------------------------------------------------------------------------------------
  static double m_wsx;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief attribute for keeping track of the wind speed y variable
  //----------------------------------------------------------------------------------------------------------------------
  static double m_wsy;
  //----------------------------------------------------------------------------------------------------------------------

};
//----------------------------------------------------------------------------------------------------------------------

#endif


